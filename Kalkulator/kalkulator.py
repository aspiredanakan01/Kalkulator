import streamlit as st
import matplotlib.pyplot as plt

# ---------------------------------------
# Data makanan sederhana (100 gram)
# ---------------------------------------
foods = {
    "Nasi Putih": {"kalori": 175, "protein": 3.2, "karbo": 40, "lemak": 0.3},
    "Ayam Goreng": {"kalori": 250, "protein": 20, "karbo": 0, "lemak": 18},
    "Tempe": {"kalori": 150, "protein": 14, "karbo": 8, "lemak": 8},
    "Sayur Bayam": {"kalori": 40, "protein": 3, "karbo": 7, "lemak": 0.5},
    "Pisang": {"kalori": 90, "protein": 1, "karbo": 23, "lemak": 0.3},
    "Telur Rebus": {"kalori": 155, "protein": 13, "karbo": 1, "lemak": 11},
    "Tahu": {"kalori": 80, "protein": 8, "karbo": 2, "lemak": 4},
    "Nasi Goreng": {"kalori": 250, "protein": 6, "karbo": 32, "lemak": 9},
    "Mie Goreng": {"kalori": 270, "protein": 7, "karbo": 40, "lemak": 8},
    "Sate Ayam": {"kalori": 230, "protein": 18, "karbo": 6, "lemak": 14},
    "Rendang": {"kalori": 350, "protein": 15, "karbo": 4, "lemak": 28},
    "Bakso": {"kalori": 200, "protein": 12, "karbo": 10, "lemak": 12},
    "Soto Ayam": {"kalori": 90, "protein": 7, "karbo": 6, "lemak": 4},
    "Ayam Bakar": {"kalori": 190, "protein": 24, "karbo": 0, "lemak": 9},
    "Ikan Goreng": {"kalori": 220, "protein": 20, "karbo": 0, "lemak": 14},
    "Ikan Bakar": {"kalori": 180, "protein": 22, "karbo": 0, "lemak": 8},
    "Udang Goreng": {"kalori": 190, "protein": 24, "karbo": 0, "lemak": 9},
    "Tempe Goreng": {"kalori": 210, "protein": 19, "karbo": 8, "lemak": 12},
    "Tahu Goreng": {"kalori": 140, "protein": 12, "karbo": 3, "lemak": 8},
    "Roti Tawar": {"kalori": 265, "protein": 9, "karbo": 49, "lemak": 3.2},
    "Kentang Goreng": {"kalori": 312, "protein": 3.4, "karbo": 41, "lemak": 15},
    "Jagung Rebus": {"kalori": 96, "protein": 3.4, "karbo": 21, "lemak": 1.5},
    "Apel": {"kalori": 52, "protein": 0.3, "karbo": 14, "lemak": 0.2},
    "Keju Cheddar": {"kalori": 403, "protein": 25, "karbo": 1.3, "lemak": 33},
    "Susu UHT (sapi)": {"kalori": 60, "protein": 3.4, "karbo": 5, "lemak": 3.3},
    "Yogurt Plain": {"kalori": 59, "protein": 10, "karbo": 3.6, "lemak": 0.4},
    "Kacang Tanah (goreng)": {"kalori": 567, "protein": 25.8, "karbo": 16.1, "lemak": 49.2},
}

# ---------------------------------------
# Tampilan Utama
# ---------------------------------------
st.set_page_config(page_title="Kalkulator Kalori ", page_icon="üî•", layout="centered")

# ---------------------------------------
# Custom CSS for Gen Z Style
# ---------------------------------------
st.markdown("""
<style>
    /* -----------------------------
       Cool, high-contrast Gen Z theme
       subtle animations and accessible
       ----------------------------- */

    :root{
        --bg-1: #0f1724; /* deep navy */
        --bg-2: #0b1220; /* darker gradient end */
        --card: rgba(255,255,255,0.04);
        --muted: rgba(255,255,255,0.7);
        --accent-1: #7c5cff; /* violet */
        --accent-2: #00d4ff; /* aqua */
        --success: #34d399;
        --warn: #fb923c;
        --danger: #f43f5e;
        --glass-blur: 8px;
    }

    /* Respect user preference for reduced motion */
    @media (prefers-reduced-motion: reduce) {
        * { animation: none !important; transition: none !important; }
    }

    /* App background with slow-moving gradient */
    .stApp {
        background: linear-gradient(180deg, var(--bg-1) 0%, var(--bg-2) 100%);
        color: var(--muted);
        background-attachment: fixed;
        min-height: 100vh;
        transition: background 0.6s ease;
        font-family: Inter, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;
    }

    /* subtle animated shimmer for background */
    .stApp::before{
        content: "";
        position: fixed;
        inset: 0;
        background: linear-gradient(120deg, rgba(124,92,255,0.06), rgba(0,212,255,0.04), transparent 45%);
        pointer-events: none;
        mix-blend-mode: overlay;
        animation: bgShift 18s linear infinite;
        opacity: 1;
    }

    @keyframes bgShift{
        0% { transform: translate3d(-10%, -5%, 0) rotate(0.001deg); }
        50% { transform: translate3d(10%, 5%, 0) rotate(0.001deg); }
        100% { transform: translate3d(-10%, -5%, 0) rotate(0.001deg); }
    }

    /* Headers */
    h1, h2, h3 { color: #ffffff; letter-spacing: -0.5px; }

    /* Card style for containers */
    .stContainer, .st-cv { }

    /* Use Streamlit's autogenerated classes conservatively; target common widgets visually */
    .stButton>button, .stSelectbox>div, .stNumberInput>div, .stSlider>div {
        border-radius: 12px !important;
        background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
        border: 1px solid rgba(255,255,255,0.06) !important;
        color: #ffffff !important;
        padding: .45rem .6rem !important;
        box-shadow: 0 4px 18px rgba(2,6,23,0.6);
        transition: transform .18s ease, box-shadow .18s ease, background .18s ease;
    }

    /* Slight lift on hover */
    .stButton>button:hover, .stSelectbox>div:hover, .stNumberInput>div:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 28px rgba(2,6,23,0.7);
    }

    /* Animated accent border on focused inputs */
    .stSelectbox>div:focus-within, .stNumberInput>div:focus-within, .stSlider>div:focus-within, .stTextInput>div:focus-within {
        outline: none !important;
        box-shadow: 0 6px 28px rgba(124,92,255,0.12), 0 0 0 3px rgba(124,92,255,0.06) !important;
        border-color: rgba(124,92,255,0.45) !important;
    }

    /* Metrics and result cards */
    .stMetric, .stMetric>div, .st-emotion-cache-1vzeuhh {
        background: linear-gradient(135deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
        border-radius: 12px;
        padding: 0.9rem !important;
        color: #fff !important;
        border: 1px solid rgba(255,255,255,0.05);
        backdrop-filter: blur(var(--glass-blur));
        box-shadow: 0 6px 30px rgba(2,6,23,0.6);
        transition: transform .22s ease, box-shadow .22s ease;
    }

    .stMetric:hover { transform: translateY(-4px); }

    /* Progress bar styling */
    .stProgress > div > div > div {
        background: linear-gradient(90deg, var(--accent-1), var(--accent-2)) !important;
        border-radius: 999px !important;
    }

    /* Pie chart text color fix inside Streamlit's canvas */
    .stCanvas { color: #fff; }

    /* Button subtle pulse animation */
    @keyframes pulseAccent {
        0% { box-shadow: 0 0 0 0 rgba(124,92,255,0.18); }
        70% { box-shadow: 0 0 0 10px rgba(124,92,255,0.02); }
        100% { box-shadow: 0 0 0 0 rgba(124,92,255,0.0); }
    }

    .stButton>button:active {
        transform: translateY(0);
        animation: pulseAccent 1.6s ease-in-out;
    }

    /* Links and accents */
    a, .stMarkdown a { color: var(--accent-2); }

    /* Small responsive tweaks */
    @media (max-width: 640px) {
        .stButton>button, .stSelectbox>div, .stNumberInput>div { padding: .5rem .75rem !important; }
    }

</style>
""", unsafe_allow_html=True)


st.title("üî• Kalkulator Kalori ")
st.caption("Hitung kalori & gizi harianmu, no ribet! ‚ú®")

# ---------------------------------------
# Input Data Pengguna
# ---------------------------------------
with st.container():
    st.header("üë§ Data Diri")
    col1, col2 = st.columns(2)
    with col1:
        gender = st.selectbox("Jenis Kelamin", ["Laki-laki", "Perempuan"])
        usia = st.slider("Usia (tahun)", 1, 100, 25)
        aktivitas = st.selectbox("Level Aktivitas", ["Santai (rebahan)", "Normal (kuliah/kerja)", "Sangat Aktif (nge-gym)"])
    with col2:
        berat = st.slider("Berat Badan (kg)", 1, 200, 60)
        tinggi = st.slider("Tinggi Badan (cm)", 100, 220, 165)

# ---------------------------------------
# Hitung BMR & TDEE
# ---------------------------------------
if gender == "Laki-laki":
    bmr = 10 * berat + 6.25 * tinggi - 5 * usia + 5
else:
    bmr = 10 * berat + 6.25 * tinggi - 5 * usia - 161

faktor = {"Santai (rebahan)": 1.2, "Normal (kuliah/kerja)": 1.55, "Sangat Aktif (nge-gym)": 1.725}
tdee = bmr * faktor[aktivitas]

st.success(f"**Kebutuhan Kalori Harianmu (TDEE):** {tdee:.0f} kkal")

# ---------------------------------------
# Input Makanan
# ---------------------------------------
with st.container():
    st.header("üçΩÔ∏è Makanan Hari Ini")
    makanan = st.multiselect("Pilih makanan yang kamu makan:", list(foods.keys()))
    porsi = {}

    for m in makanan:
        porsi[m] = st.number_input(f"{m} (gram)", min_value=0.0, max_value=1000.0, step=10.0, key=f"porsi_{m}")

# ---------------------------------------
# Hitung Total Nutrisi
# ---------------------------------------
if makanan:
    total = {"kalori": 0, "protein": 0, "karbo": 0, "lemak": 0}
    for m, g in porsi.items():
        for n in total:
            total[n] += foods[m][n] * (g / 100)

    st.divider()
    
    with st.container():
        st.subheader("üìä Hasil Asupanmu")

        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total Kalori", f"{total['kalori']:.1f} kkal")
            st.metric("Protein", f"{total['protein']:.1f} g")
        with col2:
            st.metric("Karbohidrat", f"{total['karbo']:.1f} g")
            st.metric("Lemak", f"{total['lemak']:.1f} g")

        # Progress bar kalori
        st.write("**Progress Kalori Harian:**")
        st.progress(min(total["kalori"] / tdee, 1.0))

        # Pie chart makronutrien
        st.write("**Komposisi Makro:**")
        fig, ax = plt.subplots(figsize=(3, 3))
        ax.patch.set_alpha(0) # Transparan background
        fig.patch.set_alpha(0)
        
        pie_colors = ['#ff9999','#66b3ff','#99ff99']
        ax.pie(
            [total["karbo"], total["protein"], total["lemak"]],
            labels=["Karbo", "Protein", "Lemak"],
            autopct="%1.1f%%",
            colors=pie_colors,
            textprops={"fontsize": 8, "color": "white"},
        )
        st.pyplot(fig)

    # ---------------------------------------
    # Rekomendasi Otomatis
    # ---------------------------------------
    st.divider()
    with st.container():
        st.subheader("üí° Rekomendasi Cepet")

        if total["kalori"] < 0.9 * tdee:
            st.info("Kalorimu masih kurang nih, gas nambah nasi atau pisang! üçå")
        elif total["kalori"] > 1.1 * tdee:
            st.warning("Waduh, kalori agak over. Coba kurangin yang goreng-goreng ya. üòâ")
        else:
            st.success("Mantap! Kalorimu udah pas. Pertahankan! ü•¶")

        if total["protein"] < 0.8 * (berat * 0.8):
            st.info("Biar otot makin jadi, tambahin protein dari telur atau tahu, kuy!")
else:
    st.write("üí¨ Pilih makanan & masukin porsinya buat liat hasilnya, bestie.")
